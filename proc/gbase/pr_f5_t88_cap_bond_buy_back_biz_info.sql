DELIMITER |

CREATE DEFINER="cq_sjpt"@"%" PROCEDURE "pr_f5_t88_cap_bond_buy_back_biz_info"(
	OUT	OUT_RES_MSG		VARCHAR(200),
	IN	IN_TX_DATE		VARCHAR(8)
	)
LABLE:BEGIN
/**********************************
 * LJZ 20210723 新建
 * 债券回购业务信息
 *********************************/
	
	DECLARE ETL_T_TAB_ENG_NAME 		VARCHAR(100)	DEFAULT 't88_cap_bond_buy_back_biz_info';
	DECLARE ETL_STEP_NO				INTEGER			DEFAULT 1;
	DECLARE ETL_TX_DATE 			VARCHAR(8)		DEFAULT IN_TX_DATE;
	SET OUT_RES_MSG = 'FAILED';
	
	
	/*支持数据重跑*/
	SET @SQL_STR = 'DELETE FROM PDM.'||ETL_T_TAB_ENG_NAME||' WHERE STATT_DT >= ${TX_DATE}';
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	
	/*定义临时表*/
	SET @SQL_STR = 'DROP TEMPORARY TABLE IF EXISTS VT_'||ETL_T_TAB_ENG_NAME;
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	
	/*创建临时表*/
	SET @SQL_STR = 'CREATE TEMPORARY TABLE ETL.VT_'||ETL_T_TAB_ENG_NAME||' LIKE PDM.'||ETL_T_TAB_ENG_NAME;
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	
	/*获取昨日数据计算累计VT_PRE_*/
	SET @SQL_STR = 'DROP TEMPORARY TABLE IF EXISTS VT_PRE_'||ETL_T_TAB_ENG_NAME;
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SET @SQL_STR = 'CREATE TEMPORARY TABLE VT_PRE_'||ETL_T_TAB_ENG_NAME||' AS SELECT * FROM PDM.'||ETL_T_TAB_ENG_NAME||' WHERE STATT_DT = ${LAST_TX_DATE}';
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	
	/*数据首先插入临时表VT_*/

	-- 第一组：资金债券 ${NULL_STR}
	SET @SQL_STR = '
	INSERT INTO VT_T88_CAP_BOND_BUY_BACK_BIZ_INFO(
		STATT_DT,-- 11 统计日期
		AGMT_ID,-- 	2	协议编号
		CUR_CD,-- 	3	币种代码
		BUY_BACK_BIZ_CATE_BIG_CLS_CD,-- 	4	回购业务类型大类代码
		BUY_BACK_BIZ_CATE_SML_CLS_CD,-- 	5	回购业务类型小类代码
		TRUST_ORG_ID,-- 	6	托管机构编号
		CNTPTY_ORG_ID,-- 	7	对手机构编号
		CNTPTY_ACCT_NM,-- 	8	对方账户名称
		CNTPTY_OPEN_ACCT_BANK,-- 	9	对方账户开户行
		CNTPTY_ACCT_TRUST_ORG_ID,-- 	10	对方账户托管机构编号
		CNTPTY_ACCT_TRUST_ORG_NM,-- 	11	对方账户托管机构名称
		TERM_CORP_CD,-- 	12	期限单位代码
		BUY_BACK_TERM,-- 	13	回购期限
		BUY_BACK_INT_RATE,-- 	14	回购利率
		BOND_ID,-- 	15	债券编号
		BOND_NM,-- 	16	债券名称
		BOND_CHARC_CD,-- 	17	债券性质代码
		INT_BASE_CD,-- 	18	计息基础代码
		TX_CHNL_CD,-- 	19	交易渠道代码
		PRIN_AMT,-- 	20	券面金额
		TX_AMT,-- 	21	交易金额
		TX_DT,-- 	22	交易日期
		ST_INT_DT,-- 	23	起息日期
		MATR_DT,-- 	24	到期日期
		CUST_MGR,-- 	25	客户经理
		LINE_CD,-- 	26	条线代码
		ASST_CATE_CD,-- 	27	资产类型代码
		VALID_IND,-- 	28	有效标志
		EXCHG_RATE,-- 	29	汇率
		PRIN_SUBJ_ID,-- 	30	本金科目编号
		BUY_BACK_PRIN,-- 	31	回购本金
		TO_RMB_BAL,-- 	32	折人民币回购本金
		MTH_TOTAL_BAL,-- 	33	月累积余额
		QUAR_TOTAL_BAL,-- 	34	季累积余额
		YR_TOTAL_BAL,-- 	35	年累积余额
		RMB_MTH_TOTAL_BAL,-- 	36	人民币月累积余额
		RMB_QUAR_TOTAL_BAL,-- 	37	人民币季累积余额
		RMB_YR_TOTAL_BAL,-- 	38	人民币年累积余额
		MTH_DAVG,-- 	39	月日均余额
		QUAR_DAVG,-- 	40	季日均余额
		YR_DAVG,-- 	41	年日均余额
		RMB_MTH_DAVG,-- 	42	人民币月日均余额
		RMB_QUAR_DAVG,-- 	43	人民币季日均余额
		RMB_YR_DAVG,-- 	44	人民币年日均余额
		RECVBL_INT_SUBJ_ID,-- 	45	应收利息科目编号
		RECVBL_INT_BAL-- 	46	应收利息余额
	)
	SELECT ${TX_DATE},-- 	1	统计日期
		T.AGMT_ID,-- 	2	协议编号
		T.BUY_BACK_CUR_CD,-- 	3	回购币种代码
		T.TX_DRCT_CD,-- 	4	交易方向代码 (回购方向)
		T.PLDG_CLS_IND,-- 	5	抵押分类标识
		T.TRUST_ORG_ID,-- 	6	托管机构编号
		T.CNTPTY_ORG_ID,-- 	7	对手机构编号
		T.CNTPTY_ACCT_NM,-- 	8	对方账户名称
		T.CNTPTY_OPEN_ACCT_BANK,-- 	9	对方账户开户行
		T.CNTPTY_ACCT_TRUST_ORG_ID,-- 	10	对方账户托管机构编号
		T.CNTPTY_ACCT_TRUST_ORG_NM,-- 	11	对方账户托管机构名称
		${NULL_STR},-- 	12	期限单位代码
		T.BUY_BACK_MATR_TERM,-- 	13	回购到期期限
		T.BUY_BACK_INT_RATE,-- 	14	回购利率
		NVL(T1.BOND_ID,${NULL_STR}),-- 	15	债券编号
		NVL(T2.BOND_NM,${NULL_STR}),-- 	16	债券名称
		NVL(T1.BOND_CHARC_CD,${NULL_STR}),-- 	17	债券性质代码
		T.INT_BASE_CD,-- 	18	计息基准代码
		NVL(T3.TX_CHNL_CD,${NULL_STR}),-- 	19	交易渠道代码
		T.SECURIT_FACE_TOTL_AMT,-- 	20	券面总额
		NVL(T1.BRGN_AMT,0),-- 	21	成交金额
		T.APPL_DT,-- 	22	申请日期
		T.ST_INT_DT,-- 	23	起息日期
		T.MATR_DT,-- 	24	到期日期
		NVL(T3.CUST_MGR_ID,${NULL_STR}),-- 	25	客户经理编号
		NVL(T3.LINE_CD,${NULL_STR}),-- 	26	条线代码
		NVL(T1.ASST_CATE,${NULL_STR}),-- 	27	资产类型代码
		T.VALID_IND,-- 	28	有效标志
		NVL(T6.MDL_PRC,${NULL_STR}),-- 	29	中间价
		NVL(t4.subj_id,${NULL_STR}),-- 	30	科目号
		T.FST_STL_AMT,-- 	31	首次结算金额
		NVL(T6.MDL_PRC*T.FST_STL_AMT,0),-- 	32	折人民币回购本金
		0,-- 	33	月累积余额
		0,-- 	34	季累积余额
		0,-- 	35	年累积余额
		0,-- 	36	人民币月累积余额
		0,-- 	37	人民币季累积余额
		0,-- 	38	人民币年累积余额
		0,-- 	39	月日均余额
		0,-- 	40	季日均余额
		0,-- 	41	年日均余额
		0,-- 	42	人民币月日均余额
		0,-- 	43	人民币季日均余额
		0,-- 	44	人民币年日均余额
		CASE WHEN T.TX_DRCT_CD=\'RS\'  AND T4.AMT_CATE_CD=\'ZJJE0001\' THEN NVL(t4.subj_id,${NULL_STR}) 
			WHEN T.TX_DRCT_CD=\'RB\' AND T4.AMT_CATE_CD=\'ZJJE0002\' THEN NVL(t4.subj_id,${NULL_STR})
			ELSE ${NULL_STR} 
		END,-- 	45	应收利息科目编号
		CASE WHEN T.TX_DRCT_CD=\'RS\'  AND T4.AMT_CATE_CD=\'ZJJE0010\' AND T5.BAL_DRCT=\'D\' THEN NVL(-T5.BAL,0)
			WHEN T.TX_DRCT_CD=\'RS\'  AND T4.AMT_CATE_CD=\'ZJJE0010\' AND T5.BAL_DRCT=\'C\' THEN NVL(T5.BAL,${NULL_STR})
			WHEN T.TX_DRCT_CD=\'RB\'  AND T4.AMT_CATE_CD=\'ZJJE0002\' AND T5.BAL_DRCT=\'D\' THEN NVL(T5.BAL,0)
			WHEN T.TX_DRCT_CD=\'RB\'  AND T4.AMT_CATE_CD=\'ZJJE0002\' AND T5.BAL_DRCT=\'C\' THEN NVL(-T5.BAL,0)
			ELSE 0
		END -- 	46	应收利息余额
	FROM PDM.T03_BUY_BACK_BIZ T -- 回购业务
	LEFT JOIN PDM.T03_BUY_BACK_REL_PLEDGE T1 
		ON T.AGMT_ID = T1.AGMT_ID AND T.Buy_Back_Seq_Num=T1.Buy_Back_Seq_Num AND T1.STATT_DT = ${TX_DATE}
	LEFT JOIN PDM.T02_CAP_BOND_H T2 
		ON T1.BOND_ID = T2.SRC_SYS_BOND_ID AND T2.START_DT <= ${TX_DATE}  AND T2.END_DT >= ${TX_DATE}
	LEFT JOIN PDM.T03_CAP_ACCT_INFO_H T3 
		ON T1.AGMT_ID = T3.AGMT_ID AND T3.START_DT <= ${TX_DATE}  AND T3.END_DT >= ${TX_DATE}
	LEFT JOIN PDM.T03_CAP_SUBJ_COMP_H T4 
		ON T.AGMT_ID = T4.AGMT_ID and t4.AMT_CATE_CD=\'ZJJE0001\' AND T4.START_DT <= ${TX_DATE}  AND T4.END_DT >= ${TX_DATE}
	LEFT JOIN PDM.T03_CAP_REALTM_BAL T5 
		ON T.AGMT_ID = T5.AGMT_ID and t5.amt_cate=\'ZJJE0002\'AND T5.STATT_DT = ${TX_DATE}
	LEFT JOIN PDM.t88_exchg_rate T6 
		ON T.BUY_BACK_CUR_CD = T6.Init_Cur AND T6.STATT_DT = ${TX_DATE}
	WHERE t.Fst_Stl_Amt <> 0
		-- and t4.subj_id like \'111103%\'
		-- AND ${TX_DATE} BETWEEN T.ST_INT_DT AND T.MATR_DT
	    and T.ST_INT_DT<=${TX_DATE} and T.MATR_DT>${TX_DATE}
		and T.STATT_DT=${TX_DATE}

	';
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	
	
	-- 第二组：资管债券回购
	SET @SQL_STR = '
	INSERT INTO VT_T88_CAP_BOND_BUY_BACK_BIZ_INFO(
		STATT_DT, -- 	1	统计日期
		AGMT_ID,-- 	2	协议编号
		CUR_CD,-- 	3	币种代码
		BUY_BACK_BIZ_CATE_BIG_CLS_CD,-- 	4	回购业务类型大类代码
		BUY_BACK_BIZ_CATE_SML_CLS_CD,-- 	5	回购业务类型小类代码
		TRUST_ORG_ID,-- 	6	托管机构编号
		CNTPTY_ORG_ID,-- 	7	对手机构编号
		CNTPTY_ACCT_NM,-- 	8	对方账户名称
		CNTPTY_OPEN_ACCT_BANK,-- 	9	对方账户开户行
		CNTPTY_ACCT_TRUST_ORG_ID,-- 	10	对方账户托管机构编号
		CNTPTY_ACCT_TRUST_ORG_NM,-- 	11	对方账户托管机构名称
		TERM_CORP_CD,-- 	12	期限单位代码
		BUY_BACK_TERM,-- 	13	回购期限
		BUY_BACK_INT_RATE,-- 	14	回购利率
		BOND_ID,-- 	15	债券编号
		BOND_NM,-- 	16	债券名称
		BOND_CHARC_CD,-- 	17	债券性质代码
		INT_BASE_CD,-- 	18	计息基础代码
		TX_CHNL_CD,-- 	19	交易渠道代码
		PRIN_AMT,-- 	20	券面金额
		TX_AMT,-- 	21	交易金额
		TX_DT,-- 	22	交易日期
		ST_INT_DT,-- 	23	起息日期
		MATR_DT,-- 	24	到期日期
		CUST_MGR,-- 	25	客户经理
		LINE_CD,-- 	26	条线代码
		ASST_CATE_CD,-- 	27	资产类型代码
		VALID_IND,-- 	28	有效标志
		EXCHG_RATE,-- 	29	汇率
		PRIN_SUBJ_ID,-- 	30	本金科目编号
		BUY_BACK_PRIN,-- 	31	回购本金
		TO_RMB_BAL,-- 	32	折人民币回购本金
		MTH_TOTAL_BAL,-- 	33	月累积余额
		QUAR_TOTAL_BAL,-- 	34	季累积余额
		YR_TOTAL_BAL,-- 	35	年累积余额
		RMB_MTH_TOTAL_BAL,-- 	36	人民币月累积余额
		RMB_QUAR_TOTAL_BAL,-- 	37	人民币季累积余额
		RMB_YR_TOTAL_BAL,-- 	38	人民币年累积余额
		MTH_DAVG,-- 	39	月日均余额
		QUAR_DAVG,-- 	40	季日均余额
		YR_DAVG,-- 	41	年日均余额
		RMB_MTH_DAVG,-- 	42	人民币月日均余额
		RMB_QUAR_DAVG,-- 	43	人民币季日均余额
		RMB_YR_DAVG,-- 	44	人民币年日均余额
		RECVBL_INT_SUBJ_ID,-- 	45	应收利息科目编号
		RECVBL_INT_BAL -- 	46	应收利息余额
	)
	SELECT ${TX_DATE},-- 	1	统计日期	
		T.SUBJ_MATR_CD,-- 	2	标的代码
		T.CUR_CD,-- 	3	币种代码
		T.SUBJ_MATR_SUB_CLS_CD,-- 	4	标的子类型代码
		${NULL_STR},-- 	5	回购业务类型小类代码
		${NULL_STR},-- 	6	托管机构编号
		T.TX_CNTPTY_ID,-- 	7	交易对手编号
		${NULL_STR},-- 	8	对方账户名称
		${NULL_STR},-- 	9	对方账户开户行
		${NULL_STR},-- 	10	对方账户托管机构编号
		${NULL_STR},-- 	11	对方账户托管机构名称
		${NULL_STR},-- 	12	期限单位代码
		0,-- 	13	回购期限
		T.INT_RATE,-- 	14	利率
		T.SUBJ_MATR_CD,-- 	15	标的代码
		T.SUBJ_MATR_NM,-- 	16	标的名称
		T.BOND_CHARC_CD,-- 	17	债券性质代码
		T.INT_BASE_CD,-- 	18	计息基准代码
		${NULL_STR},-- 	19	交易渠道代码
		0,-- 	20	券面金额
		0,-- 	21	交易金额
		T.TX_DT,-- 	22	交易日期
		T.ST_INT_DT,-- 	23	起息日期
		T.MATR_DT,-- 	24	到期日期
		${NULL_STR},-- 	25	客户经理
		${NULL_STR},-- 	26	条线代码
		${NULL_STR},-- 	27	资产类型代码
		${NULL_STR},-- 	28	有效标志
		T1.MDL_PRC,-- 	29	中间价
		${NULL_STR},-- 	30	本金科目编号
		T.COST_AMT,-- 	31	成本金额
		T1.MDL_PRC*T.COST_AMT,-- 	32	
		0,-- 	33	月累积余额
		0,-- 	34	季累积余额
		0,-- 	35	年累积余额
		0,-- 	36	人民币月累积余额
		0,-- 	37	人民币季累积余额
		0,-- 	38	人民币年累积余额
		0,-- 	39	月日均余额
		0,-- 	40	季日均余额
		0,-- 	41	年日均余额
		0,-- 	42	人民币月日均余额
		0,-- 	43	人民币季日均余额
		0,-- 	44	人民币年日均余额
		0,-- 	45	应收利息科目编号
		0 -- 	46	应收利息余额
	FROM PDM.T05_CHREM_PROD_INVST_EVT T
	LEFT JOIN PDM.t88_exchg_rate T1 
		ON T.CUR_CD = T1.Init_Cur AND T1.STATT_DT = ${TX_DATE}
	WHERE T.TX_DT = ${TX_DATE} AND T.Subj_Matr_Cate_Cd =\'2\' AND FLOW_STAT_CD=\'1\'
	';
	-- CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	-- IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	-- SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	
	/*计算累计VT_AT_*/
	SET @SQL_STR = 'DROP TEMPORARY TABLE IF EXISTS VT_AT_'||ETL_T_TAB_ENG_NAME;
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	SET @SQL_STR = 'CREATE TEMPORARY TABLE VT_AT_'||ETL_T_TAB_ENG_NAME||' LIKE PDM.'||ETL_T_TAB_ENG_NAME;
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	-- 插入到AT表
	SET @SQL_STR = '
	INSERT INTO VT_AT_T88_CAP_BOND_BUY_BACK_BIZ_INFO
	SELECT
		NVL(T.STATT_DT,T1.STATT_DT),-- 1 统计日期
		NVL(T.AGMT_ID,T1.AGMT_ID),-- 2 协议编号
		NVL(T.CUR_CD,T1.CUR_CD),-- 3 币种代码
		NVL(T.BUY_BACK_BIZ_CATE_BIG_CLS_CD,T1.BUY_BACK_BIZ_CATE_BIG_CLS_CD),-- 4 回购业务类型大类代码
		NVL(T.BUY_BACK_BIZ_CATE_SML_CLS_CD,T1.BUY_BACK_BIZ_CATE_SML_CLS_CD),-- 5 回购业务类型小类代码
		NVL(T.TRUST_ORG_ID,T1.TRUST_ORG_ID),-- 6 托管机构编号
		NVL(T.CNTPTY_ORG_ID,T1.CNTPTY_ORG_ID),-- 7 对手机构编号
		NVL(T.CNTPTY_ACCT_NM,T1.CNTPTY_ACCT_NM),-- 8 对方账户名称
		NVL(T.CNTPTY_OPEN_ACCT_BANK,T1.CNTPTY_OPEN_ACCT_BANK),-- 9 对方账户开户行
		NVL(T.CNTPTY_ACCT_TRUST_ORG_ID,T1.CNTPTY_ACCT_TRUST_ORG_ID),-- 10 对方账户托管机构编号
		NVL(T.CNTPTY_ACCT_TRUST_ORG_NM,T1.CNTPTY_ACCT_TRUST_ORG_NM),-- 11 对方账户托管机构名称
		NVL(T.TERM_CORP_CD,T1.TERM_CORP_CD),-- 12 期限单位代码
		NVL(T.BUY_BACK_TERM,T1.BUY_BACK_TERM),-- 13 回购期限
		NVL(T.BUY_BACK_INT_RATE,T1.BUY_BACK_INT_RATE),-- 14 回购利率
		NVL(T.BOND_ID,T1.BOND_ID),-- 15 债券编号
		NVL(T.BOND_NM,T1.BOND_NM),-- 16 债券名称
		NVL(T.BOND_CHARC_CD,T1.BOND_CHARC_CD),-- 17 债券性质代码
		NVL(T.INT_BASE_CD,T1.INT_BASE_CD),-- 18 计息基础代码
		NVL(T.TX_CHNL_CD,T1.TX_CHNL_CD),-- 19 交易渠道代码
		NVL(T.PRIN_AMT,T1.PRIN_AMT),-- 20 券面金额
		NVL(T.TX_AMT,T1.TX_AMT),-- 21 交易金额
		NVL(T.TX_DT,T1.TX_DT),-- 22 交易日期
		NVL(T.ST_INT_DT,T1.ST_INT_DT),-- 23 起息日期
		NVL(T.MATR_DT,T1.MATR_DT),-- 24 到期日期
		NVL(T.CUST_MGR,T1.CUST_MGR),-- 25 客户经理
		NVL(T.LINE_CD,T1.LINE_CD),-- 26 条线代码
		NVL(T.ASST_CATE_CD,T1.ASST_CATE_CD),-- 27 资产类型代码
		NVL(T.VALID_IND,T1.VALID_IND),-- 28 有效标志
		NVL(T.EXCHG_RATE,T1.EXCHG_RATE),-- 29 汇率
		NVL(T.PRIN_SUBJ_ID,T1.PRIN_SUBJ_ID),-- 30 本金科目编号
		NVL(T.BUY_BACK_PRIN,T1.BUY_BACK_PRIN),-- 31 回购本金
		NVL(T.TO_RMB_BAL,T1.TO_RMB_BAL),-- 32 折人民币回购本金
		CASE WHEN ${TX_DATE}=${THIS_MONTH_BEGIN} THEN T.BUY_BACK_PRIN
			ELSE NVL(T1.MTH_TOTAL_BAL,0)+T.MTH_TOTAL_BAL END AS MTH_TOTAL_BAL,-- 33 月累积余额
		CASE WHEN ${TX_DATE}=${THIS_QUART_BEGIN} THEN T.BUY_BACK_PRIN
			ELSE NVL(T1.QUAR_TOTAL_BAL,0)+T.QUAR_TOTAL_BAL END AS QUAR_TOTAL_BAL,-- 34 季累积余额
		CASE WHEN ${TX_DATE}=${THIS_YEAR_BEGIN} THEN T.BUY_BACK_PRIN
			ELSE NVL(T1.YR_TOTAL_BAL,0)+T.YR_TOTAL_BAL END AS YR_TOTAL_BAL,-- 34 季累积余额
		CASE WHEN ${TX_DATE}=${THIS_MONTH_BEGIN} THEN T.TO_RMB_BAL
			ELSE NVL(T1.RMB_MTH_TOTAL_BAL,0)+T.RMB_MTH_TOTAL_BAL END AS RMB_MTH_TOTAL_BAL,-- 36 人民币月累积余额
		CASE WHEN ${TX_DATE}=${THIS_QUART_BEGIN} THEN T.TO_RMB_BAL
			ELSE NVL(T1.RMB_QUAR_TOTAL_BAL,0)+T.RMB_QUAR_TOTAL_BAL END AS RMB_QUAR_TOTAL_BAL,-- 37 人民币季累积余额
		CASE WHEN ${TX_DATE}=${THIS_YEAR_BEGIN} THEN T.TO_RMB_BAL
			ELSE NVL(T1.RMB_YR_TOTAL_BAL,0)+T.RMB_YR_TOTAL_BAL END AS RMB_YR_TOTAL_BAL,-- 38 人民币年累积余额
		CASE WHEN ${TX_DATE}=${THIS_MONTH_BEGIN} THEN T.BUY_BACK_PRIN
			ELSE (NVL(T1.MTH_TOTAL_BAL,0)+T.MTH_TOTAL_BAL)/(${TX_DATE}-${THIS_MONTH_BEGIN}+1) END AS MTH_DAVG,-- 39 月日均余额
		CASE WHEN ${TX_DATE}=${THIS_QUART_BEGIN} THEN T.BUY_BACK_PRIN
			ELSE (NVL(T1.QUAR_TOTAL_BAL,0)+T.QUAR_TOTAL_BAL)/(${TX_DATE}-${THIS_QUART_BEGIN}+1) END AS QUAR_DAVG,-- 40 季日均余额
		CASE WHEN ${TX_DATE}=${THIS_YEAR_BEGIN} THEN T.BUY_BACK_PRIN
			ELSE (NVL(T1.YR_TOTAL_BAL,0)+T.YR_TOTAL_BAL)/(${TX_DATE}-${THIS_YEAR_BEGIN}+1) END AS YR_DAVG,-- 41 年日均余额
		CASE WHEN ${TX_DATE}=${THIS_MONTH_BEGIN} THEN T.TO_RMB_BAL
			ELSE (NVL(T1.RMB_MTH_TOTAL_BAL,0)+T.RMB_MTH_TOTAL_BAL)/(${TX_DATE}-${THIS_MONTH_BEGIN}+1) END AS RMB_MTH_TOTAL_BAL,-- 42 人民币月日均余额
		CASE WHEN ${TX_DATE}=${THIS_QUART_BEGIN} THEN T.TO_RMB_BAL
			ELSE (NVL(T1.RMB_QUAR_TOTAL_BAL,0)+T.RMB_QUAR_TOTAL_BAL)/(${TX_DATE}-${THIS_QUART_BEGIN}+1) END AS RMB_QUAR_TOTAL_BAL,-- 43 人民币季日均余额
		CASE WHEN ${TX_DATE}=${THIS_YEAR_BEGIN} THEN T.TO_RMB_BAL
			ELSE (NVL(T1.RMB_YR_TOTAL_BAL,0)+T.RMB_YR_TOTAL_BAL)/(${TX_DATE}-${THIS_YEAR_BEGIN}+1) END AS RMB_YR_TOTAL_BAL,-- 44 人民币年日均余额
		NVL(T.RECVBL_INT_SUBJ_ID,T1.RECVBL_INT_SUBJ_ID),-- 45 应收利息科目编号
		NVL(T.RECVBL_INT_BAL,T1.RECVBL_INT_BAL)-- 46 应收利息余额
	FROM VT_T88_CAP_BOND_BUY_BACK_BIZ_INFO T
	FULL JOIN VT_PRE_T88_CAP_BOND_BUY_BACK_BIZ_INFO T1
		ON T.AGMT_ID=T1.AGMT_ID
	WHERE T.STATT_DT=${TX_DATE}
	';
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	
	
	/*检查插入的临时表数据是否有主键错误*/
	
	-- 获取主键字段
	SELECT PHYSICAL_PRI_KEY INTO @PK_COLUMN FROM DATAMAPPING_TASK WHERE T_TAB_ENG_NAME=ETL_T_TAB_ENG_NAME;
	-- 0正常
	SET @SQL_STR = 'SELECT COUNT(1) INTO @PK_COUNT FROM(SELECT 1 FROM VT_'||ETL_T_TAB_ENG_NAME||' GROUP BY '||@PK_COLUMN||' HAVING COUNT(1)>1) T';
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;
	
	IF @PK_COUNT <> 0
	THEN
		UPDATE ETL.ETL_JOB_STATUS_EDW SET STEP_STATUS='Failed',STEP_ERR_LOG='主键重复', LAST_END_TIME=CURRENT_TIMESTAMP WHERE SQL_UNIT=ETL_T_TAB_ENG_NAME AND TX_DATE=TX_DATE AND STEP_NO=ETL_STEP_NO-1;
		LEAVE LABLE;
	END IF;
	
	/*通过主键检查的数据插入正式表中*/
	SET @SQL_STR='INSERT INTO PDM.'||ETL_T_TAB_ENG_NAME||' SELECT * FROM VT_AT_'||ETL_T_TAB_ENG_NAME||' WHERE STATT_DT=${TX_DATE}'; 
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@SQL_STR,ETL_TX_DATE);
	IF @RTC <> 0 THEN LEAVE LABLE;END IF;
	SELECT ETL_STEP_NO + 1 INTO ETL_STEP_NO;

	SET OUT_RES_MSG='SUCCESSFUL';
	
END |