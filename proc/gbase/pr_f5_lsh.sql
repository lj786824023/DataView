DELIMITER |

CREATE DEFINER="gbase"@"%" PROCEDURE "pr_f5_lsh"(
	OUT	OUT_RES_MSG		VARCHAR(200),
	IN	IN_TX_DATE		VARCHAR(8),
	IN	IN_SCHEMA_NAME	VARCHAR(30),
	IN	IN_TABLE_NAME	VARCHAR(60),
	IN	IN_ENV			VARCHAR(10)
)
lable:BEGIN
/**********************************
算法：	切片算法F5
说明：	LP				2021-02-28新建
		DPL				2021-04-20增加日志
		LJZ				2021-05-19合并增全量算法
入参：	IN_TX_DATE			批次日期
		IN_SCHEMA_NAME		库名称
		IN_TABLE_NAME		表英文名称
		IN_ENV			环境名称(dev-开发环境、prd-生产环境)
		 
返回值：OUT_RES_MSG
-- 0	成功
-- 12	失败
**********************************/

	DECLARE ERR_CODE					VARCHAR(2000);
	DECLARE ERR_MSG						VARCHAR(2000);
		
	DECLARE ETL_PRI_KEY					VARCHAR(100) 	DEFAULT '';
	DECLARE ETL_PRI_KEY_CMP				VARCHAR(200)	DEFAULT '';
	DECLARE ETL_TABLE_CHN_NAME			VARCHAR(100)	DEFAULT '';
	DECLARE ETL_TX_DATE					VARCHAR(8)		DEFAULT IN_TX_DATE;
	
	DECLARE ETL_SCHEMA_NAME				VARCHAR(30)		DEFAULT IN_SCHEMA_NAME;
	DECLARE ETL_CUR_TIMESTAMP			VARCHAR(19);
	DECLARE ETL_SEQ_NUM					INTEGER			DEFAULT 0;
	DECLARE ETL_T_TAB_ENG_NAME			VARCHAR(60)		DEFAULT IN_TABLE_NAME;
	DECLARE ETL_T_TAB_ENG_NAME_VT		VARCHAR(60);
	DECLARE ETL_T_TAB_ENG_NAME_OD		VARCHAR(60);
	DECLARE ETL_T_TAB_ENG_NAME_WT_I		VARCHAR(60);
	DECLARE ETL_T_TAB_ENG_NAME_WT_U		VARCHAR(60);
	DECLARE ETL_T_COL_ENG_NAME			VARCHAR(60);
	DECLARE ETL_T_COL_DATATYPE			VARCHAR(100);
	DECLARE ETL_S_GROUP_ID_COUNT		INTEGER			DEFAULT 1;
	DECLARE ETL_S_GROUP_ID_CURRENT		INTEGER			DEFAULT 1;
	DECLARE ETL_DATA_GROUP_CURR_NUM		INTEGER			DEFAULT 201;
	DECLARE ETL_S_TAB_ENG_NAME			VARCHAR(60);
	DECLARE ETL_S_COL_ENG_NAME			VARCHAR(60);
	DECLARE ETL_S_COL_DATATYPE			VARCHAR(100);
	DECLARE ETL_S_TAB_PK				VARCHAR(200);
	DECLARE ETL_R_TRANS_EXP				TEXT			DEFAULT '';
	DECLARE ETL_R_IS_JOIN				VARCHAR(20);
	DECLARE ETL_R_JOIN_SQL				TEXT			DEFAULT '';
	DECLARE ETL_R_WHERE_CONDITION		TEXT			DEFAULT '';
	DECLARE ETL_R_EXEC_VT				TEXT			DEFAULT '';
	
	DECLARE ETL_ALL_COLS				VARCHAR(2000);
	DECLARE ETL_ALL_COLS_DIFF			VARCHAR(2000)	DEFAULT '';
	DECLARE ETL_ALL_COLS_DIFF_A			VARCHAR(2000)	DEFAULT '';
	DECLARE ETL_ROW_NUM					INTEGER			DEFAULT 0;
    DECLARE ETL_RESET_RUN				INTEGER 		DEFAULT 0;
	DECLARE ETL_IN_ENV					VARCHAR(10) 	DEFAULT IN_ENV;
	DECLARE ETL_LIFECYCLE				VARCHAR(10);
	DECLARE ETL_HIST_LOG_MAX_DATE		VARCHAR(10)		DEFAULT ETL_TX_DATE;
	DECLARE ETL_TEMPORARY				VARCHAR(20)		DEFAULT 'TEMPORARY';
	DECLARE ETL_RUNNING_STEP_COUNT		INTEGER 		DEFAULT 0;
	DECLARE	ETL_ACTIVE_COUNT			BIGINT			DEFAULT 0;
	
	DECLARE	ETL_USER_ID					VARCHAR(30)		DEFAULT SESSION_USER();
	DECLARE	ETL_STEP_NO					INTEGER			DEFAULT 0;
		
	/*Exception handling 异常处理*/
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS condition 1 ERR_CODE = returned_sqlstate, ERR_MSG = message_text;
		SELECT COUNT(*) INTO ETL_RUNNING_STEP_COUNT 
		FROM ETL.etl_job_status 
		WHERE table_name = ETL_T_TAB_ENG_NAME 
		AND tx_date = ETL_TX_DATE 
		AND step_status = 'Running';
		
		IF ETL_RUNNING_STEP_COUNT = 0 THEN
			SELECT CURRENT_TIMESTAMP INTO ETL_CUR_TIMESTAMP;
			INSERT INTO ETL.ETL_JOB_STATUS_EDW VALUES ('',ETL_USER_ID,ETL_T_TAB_ENG_NAME,ETL_TX_DATE,0,ERR_CODE,0,'Failed',ERR_CODE||':'||ERR_MSG,ETL_CUR_TIMESTAMP,ETL_CUR_TIMESTAMP);
			SET OUT_RES_MSG = '12';

		ELSE 
			UPDATE ETL.ETL_JOB_STATUS_EDW
			SET STEP_STATUS = 'Failed'
			,STEP_ERR_LOG = ERR_CODE||':'||ERR_MSG
			,LAST_END_TIME = CURRENT_TIMESTAMP
			WHERE SQL_UNIT = ETL_T_TAB_ENG_NAME 
			AND TX_DATE = ETL_TX_DATE 
			AND STEP_STATUS = 'Running'
			AND USER_ID = ETL_USER_ID
			AND SQL_UNIT = ETL_T_TAB_ENG_NAME;
		END IF;
	END;
	
	SET ETL_T_TAB_ENG_NAME_VT 	= CONCAT('VT_',ETL_T_TAB_ENG_NAME);
	
	DELETE FROM ETL.ETL_JOB_STATUS_EDW 
	WHERE SQL_UNIT = ETL_T_TAB_ENG_NAME
	AND TX_DATE = ETL_TX_DATE 
	AND USER_ID = ETL_USER_ID;

	/* 入参判断：日期判断 正负7天 */
	SELECT MAX(DATA_DATE) 
	FROM ETL.ETL_HIST_LOG 
	WHERE OWNER = ETL_SCHEMA_NAME 
	AND TABLE_NAME = ETL_T_TAB_ENG_NAME INTO ETL_HIST_LOG_MAX_DATE;	
	
	SELECT COALESCE(ETL_HIST_LOG_MAX_DATE,ETL_TX_DATE) INTO ETL_HIST_LOG_MAX_DATE;
	
	IF ABS(DATEDIFF(ETL_TX_DATE,ETL_HIST_LOG_MAX_DATE)) > 7
	THEN
		SELECT CURRENT_TIMESTAMP INTO ETL_CUR_TIMESTAMP;
		INSERT INTO ETL.ETL_JOB_STATUS_EDW VALUES ('',ETL_USER_ID,ETL_T_TAB_ENG_NAME,ETL_TX_DATE,1000001,'',0,'Failed','上一批次最大日期:'||ETL_HIST_LOG_MAX_DATE,ETL_CUR_TIMESTAMP,ETL_CUR_TIMESTAMP);
		
		SET OUT_RES_MSG = '12';
		LEAVE LABLE;
	END IF;
	
	/*重跑，清除 当天或者晚于当天的数据 根据日志表控制，重跑22号的数，则需要删除23号之后的日志*/
	SELECT COUNT(1) FROM ETL.ETL_HIST_LOG 
	WHERE OWNER = ETL_SCHEMA_NAME 
	AND TABLE_NAME = ETL_T_TAB_ENG_NAME
    AND DATA_DATE >= ETL_TX_DATE INTO ETL_RESET_RUN;
	
 	IF ETL_RESET_RUN > 0 then
 		-- 删除新增的数据
		SET @DELETE_OD_DATA =  CONCAT('DELETE FROM ',ETL_SCHEMA_NAME, '.', ETL_T_TAB_ENG_NAME ,' WHERE Statt_Dt >= ${TX_DATE}');
		CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,1000002,@DELETE_OD_DATA,ETL_TX_DATE);
		IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;
				
 	END IF;
	
	/*etl_hist_log记录运行日志*/
	CALL ETL.PR_LOG_HIST(ETL_SCHEMA_NAME, ETL_T_TAB_ENG_NAME, ETL_TX_DATE, OUT_RES_MSG);
 	
	/*F5 和 F3X 算法对生命周期做处理*/
	-- DATAMAPPING_TASK获取生命周期
	SELECT
	UPPER(SAVE_CYCLE) INTO ETL_LIFECYCLE
	FROM ETL.DATAMAPPING_TASK
	WHERE UPPER(T_TAB_ENG_NAME) = UPPER(IN_TABLE_NAME)
	AND ETL_ALGORITHM = 'F5'
	AND ENABLE = '1'
	LIMIT 1;
	
	-- 判断生命周期参数合法性
	IF REGEXP_LIKE(ETL_LIFECYCLE,'^D\\d+') = 0 THEN
		SELECT CURRENT_TIMESTAMP INTO ETL_CUR_TIMESTAMP;
		INSERT INTO ETL.ETL_JOB_STATUS_EDW VALUES ('',ETL_USER_ID,ETL_T_TAB_ENG_NAME,ETL_TX_DATE,1000003,'',0,'Failed','生命周期参数不合法',ETL_CUR_TIMESTAMP,ETL_CUR_TIMESTAMP);	
		
		SET OUT_RES_MSG = '12';
		LEAVE LABLE;
	END IF;
	
	-- DATAMAPPING_TASK获取主键
	SELECT
	UPPER(PHYSICAL_PRI_KEY) INTO ETL_PRI_KEY
	FROM ETL.DATAMAPPING_TASK
	WHERE UPPER(T_TAB_ENG_NAME) = UPPER(IN_TABLE_NAME)
	AND ETL_ALGORITHM = 'F5'
	AND ENABLE = '1'
	LIMIT 1;
	
	-- 主键判断
	IF ETL_PRI_KEY = '' THEN
		SELECT CURRENT_TIMESTAMP INTO ETL_CUR_TIMESTAMP;
		INSERT INTO ETL.ETL_JOB_STATUS_EDW VALUES ('',ETL_USER_ID,ETL_T_TAB_ENG_NAME,ETL_TX_DATE,1000004,'',0,'Failed','未获取主键信息',ETL_CUR_TIMESTAMP,ETL_CUR_TIMESTAMP);	
		
		SET OUT_RES_MSG = '12';
		LEAVE LABLE;
	END IF;	
	
	IF UPPER(ETL_IN_ENV) = 'DEV' THEN 
		SET ETL_TEMPORARY = '';
	END IF;	
	
	/*删除临时表*/	
	SET @DROP_VT_SQL = CONCAT('DROP ',ETL_TEMPORARY,' TABLE IF EXISTS ',ETL_SCHEMA_NAME,'.',ETL_T_TAB_ENG_NAME_VT);
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,1000005,@DROP_VT_SQL,ETL_TX_DATE);
	IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;
	/*创建临时表*/
	SET @CREATE_VT_SQL = CONCAT('CREATE ',ETL_TEMPORARY,' TABLE ',ETL_SCHEMA_NAME,'.',ETL_T_TAB_ENG_NAME_VT,' LIKE ',ETL_SCHEMA_NAME,'.',ETL_T_TAB_ENG_NAME);
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,1000006,@CREATE_VT_SQL,ETL_TX_DATE);
	IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;
	
	DROP TABLE IF EXISTS VT_TABLE;
	CREATE TEMPORARY TABLE VT_TABLE
	(
		S_TABLE VARCHAR(50)
	);
	
	INSERT INTO VT_TABLE
	SELECT DISTINCT UPPER(S_TAB_ENG_NAME) FROM(
	SELECT S_TAB_ENG_NAME,ROW_NUMBER() OVER(PARTITION BY S_GROUP_ID ORDER BY SEQ_NUM) AS SEQ
	FROM ETL.DATAMAPPING WHERE UPPER(T_TAB_ENG_NAME) = UPPER(ETL_T_TAB_ENG_NAME) AND E_PRIORITY = 1) T
	WHERE SEQ=1;
	
	SELECT COUNT(1) INTO @ETL_S_TAB_COUNT FROM VT_TABLE;
		
	WHILE @ETL_S_TAB_COUNT <> 0 DO
		SET ETL_STEP_NO = CAST(CONCAT(ETL_DATA_GROUP_CURR_NUM,'0000') AS INT);
		SET @EXEC_SQL = 'TRUNCATE TABLE ${AUTO_PDM}.'||ETL_T_TAB_ENG_NAME_VT;
		CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@EXEC_SQL,ETL_TX_DATE);
		IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;
		
		SELECT S_TABLE INTO @S_TABLE FROM VT_TABLE LIMIT 1;
		
		
		DROP TABLE IF EXISTS VT_GROUP;
		CREATE TEMPORARY TABLE VT_GROUP
		(
			S_GROUP_ID INT
		);
		INSERT INTO VT_GROUP
		SELECT DISTINCT S_GROUP_ID FROM ETL.DATAMAPPING
		WHERE UPPER(T_TAB_ENG_NAME) = UPPER(IN_TABLE_NAME) 
		AND S_TAB_ENG_NAME = @S_TABLE
		AND E_PRIORITY = 1;
	
		SELECT COUNT(1) INTO @ETL_S_GROUP_ID_COUNT FROM VT_GROUP;
		WHILE @ETL_S_GROUP_ID_COUNT <> 0 DO
			SELECT MIN(S_GROUP_ID) into @S_GROUP_ID FROM VT_GROUP;
			-- 获取datamapping插入列
			
			SELECT 
			SUBSTR(CAST(GROUP_CONCAT(CONCAT(',',R_TRANS_EXP,' AS ',T_COL_ENG_NAME
			,CASE
				WHEN REGEXP_LIKE(R_TRANS_EXP,'\n') = 0 
				THEN CASE
					WHEN SEQ_NUM = MIN_SEQ_NUM THEN REPEAT(' ',LINE_LEN + 6 - LENGTH(R_TRANS_EXP||T_COL_ENG_NAME))
					ELSE REPEAT(' ',LINE_LEN + 5 - LENGTH(R_TRANS_EXP||T_COL_ENG_NAME))
					END
				WHEN REGEXP_LIKE(R_TRANS_EXP,'\n') = 1 
				THEN REPEAT(' ',LINE_LEN + 6 - LENGTH(SUBSTRING_INDEX(R_TRANS_EXP,'\n',-1)||T_COL_ENG_NAME))
				ELSE ' '
			END	
			,CASE
				WHEN UPPER(T_COL_ENG_NAME) IN ('DATA_DT','START_DT','END_DT','TX_DT','STATT_DT') THEN ''
				ELSE '-- '||CONVERT(T_COL_CHN_NAME USING UTF8)
			END
			) ORDER BY SEQ_NUM ASC  SEPARATOR '\n')  AS CHAR),2) 
			INTO ETL_R_TRANS_EXP
			FROM (
				SELECT
				R_TRANS_EXP
				,T_COL_ENG_NAME
				,T_COL_CHN_NAME
				,SEQ_NUM
				,MIN_SEQ_NUM
				,MAX(LINE_LEN) OVER() AS LINE_LEN
				FROM (
					SELECT 
					R_TRANS_EXP
					,T_COL_ENG_NAME
					,T_COL_CHN_NAME
					,SEQ_NUM
					,MIN(SEQ_NUM) OVER() AS MIN_SEQ_NUM
					,CASE 
						WHEN REGEXP_LIKE(R_TRANS_EXP,'\n') = 0 
						THEN (LENGTH(R_TRANS_EXP||T_COL_ENG_NAME)) 
						WHEN REGEXP_LIKE(R_TRANS_EXP,'\n') = 1
						THEN (LENGTH(SUBSTRING_INDEX(R_TRANS_EXP,'\n',-1)||T_COL_ENG_NAME))
						ELSE -1
					END AS LINE_LEN
					FROM ETL.DATAMAPPING 
					WHERE UPPER(T_TAB_ENG_NAME) = UPPER(IN_TABLE_NAME)
					AND S_GROUP_ID = @S_GROUP_ID
					GROUP BY 1,2,3,4
				) M1 
			) M2;
			-- 获取源表表名
			/*SELECT S_TAB_ENG_NAME INTO ETL_S_TAB_ENG_NAME
			FROM ETL.DATAMAPPING
			WHERE UPPER(T_TAB_ENG_NAME) = UPPER(IN_TABLE_NAME)
			AND S_GROUP_ID = @S_GROUP_ID
			ORDER BY SEQ_NUM LIMIT 1;*/
			
			/*根据ods分表日志情况取分库分表后的表名*/
			select
				coalesce(
					t2.table_schema_his || '.' || t2.table_name_his,
					S_TAB_ENG_NAME
				) INTO ETL_S_TAB_ENG_NAME
			from
				etl.datamapping t1 left join comm.split_table_log t2 on
				upper( substring( t1.s_tab_eng_name, instr( t1.s_tab_eng_name, '.' )+ 1 ))= upper( t2.table_name )
				and IN_TX_DATE between t2.split_start_date and t2.split_end_date
			where
				upper( t1.T_TAB_ENG_NAME )= UPPER(IN_TABLE_NAME)
				and t1.S_GROUP_ID = @S_GROUP_ID
			order by
				t1.SEQ_NUM limit 1;
			
			
			/*获取增全量类型*/
			SELECT COUNT(1) INTO @S_TAB_TYPE FROM ETL.ETL_SRC_INTER_CTL WHERE UPPER(EDW_FORM_EN_NM)=SUBSTRING_INDEX(UPPER(ETL_S_TAB_ENG_NAME),'.','-1'); 
			IF @S_TAB_TYPE='0' THEN
				SET @S_TAB_TYPE='n';
			ELSE
				SELECT NVL(SRC_SYS_INC_QTY_IND,'q') INTO @S_TAB_TYPE FROM ETL.ETL_SRC_INTER_CTL WHERE UPPER(EDW_FORM_EN_NM)=SUBSTRING_INDEX(UPPER(ETL_S_TAB_ENG_NAME),'.','-1'); 
			END IF;
			-- 获取join
			/*SELECT
			CAST(GROUP_CONCAT(CONCAT(R_JOIN_TYPE,' ',R_JOIN_MARKET_TABNAME,'\n',R_JOIN_CONDITION) ORDER BY SEQ_NUM ASC SEPARATOR '\n') as CHAR(8000)) INTO ETL_R_JOIN_SQL
			FROM ETL.DATAMAPPING
			WHERE UPPER(R_IS_JOIN) = 'Y'
			AND UPPER(T_TAB_ENG_NAME) = UPPER(IN_TABLE_NAME)
			AND S_GROUP_ID = @S_GROUP_ID;*/
			
			select
			cast(
				GROUP_CONCAT(
					concat( R_JOIN_TYPE, ' ', coalesce( t2.table_schema_his || '.' || t2.table_name_his||' '||upper( substring( t1.r_join_market_tabname, instr( t1.r_join_market_tabname, ' ' ))), R_JOIN_MARKET_TABNAME ), '\n', R_JOIN_CONDITION )
				order by
					SEQ_NUM asc separator '\n'
				) as char
			) into
				ETL_R_JOIN_SQL
			from
				ETL.DATAMAPPING t1 left join comm.split_table_log t2 on
				upper( substring( t1.r_join_market_tabname, instr( t1.r_join_market_tabname, '.' )+ 1, instr( t1.r_join_market_tabname, ' ' )- instr( t1.r_join_market_tabname, '.' )-1))= upper( t2.table_name )
				and IN_TX_DATE between t2.split_start_date and t2.split_end_date
			where
				upper( t1.R_IS_JOIN )= 'Y'
				and upper( t1.T_TAB_ENG_NAME )= upper( IN_TABLE_NAME )
				and t1.S_GROUP_ID = @S_GROUP_ID;
			
			-- 获取where条件
			SELECT
			CAST(GROUP_CONCAT(R_WHERE_CONDITION ORDER BY SEQ_NUM ASC SEPARATOR '\n') as CHAR(8000)) INTO ETL_R_WHERE_CONDITION
			FROM ETL.DATAMAPPING
			WHERE TRIM(R_WHERE_CONDITION) <> ''
			AND UPPER(T_TAB_ENG_NAME) = UPPER(IN_TABLE_NAME)
			AND S_GROUP_ID = @S_GROUP_ID;
			-- 处理join
			SELECT
			CASE 
				WHEN COALESCE(ETL_R_JOIN_SQL,'') = '' THEN ''
				ELSE CONCAT(ETL_R_JOIN_SQL,' \n')
			END INTO ETL_R_JOIN_SQL;
			-- 处理where
			SELECT
				CASE 
					WHEN COALESCE(ETL_R_WHERE_CONDITION,'') = '' THEN ''
					ELSE CONCAT('WHERE ',ETL_R_WHERE_CONDITION)
				END INTO ETL_R_WHERE_CONDITION;
			-- 插入VT
			SET @EXEC_VT_SQL = CONCAT('INSERT INTO ${AUTO_PDM}.',ETL_T_TAB_ENG_NAME_VT,' \n','SELECT ',' \n',ETL_R_TRANS_EXP,
				'\nFROM ',COALESCE(ETL_S_TAB_ENG_NAME,''),' A \n',
					ETL_R_JOIN_SQL,ETL_R_WHERE_CONDITION,' \n');
			SET ETL_STEP_NO = CAST(CONCAT(ETL_DATA_GROUP_CURR_NUM,RIGHT(CONCAT('000',@S_GROUP_ID),3),1) AS INT);
			CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@EXEC_VT_SQL,ETL_TX_DATE);
			
			IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;
			
			DELETE FROM VT_GROUP WHERE S_GROUP_ID = @S_GROUP_ID;
			SELECT COUNT(1) INTO @ETL_S_GROUP_ID_COUNT FROM VT_GROUP;
			
		END WHILE;
		
		-- 执行额外sql
		SELECT 
		CAST(GROUP_CONCAT(COALESCE(R_EXEC_VT,'') ORDER BY SEQ_NUM ASC SEPARATOR '\n') as CHAR(8000)) into ETL_R_EXEC_VT
		FROM ETL.DATAMAPPING 
		WHERE UPPER(T_TAB_ENG_NAME) = UPPER(IN_TABLE_NAME)
		AND S_GROUP_ID = ETL_S_GROUP_ID_CURRENT
		AND COALESCE(R_EXEC_VT,'') <> '';
		
		SELECT COALESCE(ETL_R_EXEC_VT,'')  into ETL_R_EXEC_VT;
				
		IF ETL_R_EXEC_VT != '' THEN 
			SET @EXEC_PRE_SQL = CONCAT(ETL_R_EXEC_VT,'');
			SET ETL_STEP_NO = CAST(CONCAT(ETL_DATA_GROUP_CURR_NUM,'9991') AS INT);
			CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@EXEC_PRE_SQL,ETL_TX_DATE);
			IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;			
		END IF;
		
		-- 向F5表插入
		SET ETL_STEP_NO = CAST(CONCAT(ETL_DATA_GROUP_CURR_NUM,'9992') AS INT);
		SET @EXEC_MERGE_SQL = CONCAT('INSERT INTO ${AUTO_PDM}.',ETL_T_TAB_ENG_NAME,' \n','SELECT * FROM ${AUTO_PDM}.',ETL_T_TAB_ENG_NAME_VT);
		CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@EXEC_MERGE_SQL,ETL_TX_DATE);
		IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;
		-- 如果是增量，则把昨日有效的插入
		IF @S_TAB_TYPE = 'z' THEN
			SET ETL_STEP_NO = CAST(CONCAT(ETL_DATA_GROUP_CURR_NUM,'9993') AS INT);

			SET @EXEC_MERGE_SQL = CONCAT('INSERT INTO ${AUTO_PDM}.',ETL_T_TAB_ENG_NAME,' \n','SELECT * FROM ${AUTO_PDM}.',ETL_T_TAB_ENG_NAME,
			'\nWHERE Statt_dt = ${LAST_TX_DATE} \nAND (',ETL_PRI_KEY,') NOT IN \n(\n SELECT ',ETL_PRI_KEY,' \n FROM ${AUTO_PDM}.',ETL_T_TAB_ENG_NAME_VT,'\n)');
			CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,ETL_STEP_NO,@EXEC_MERGE_SQL,ETL_TX_DATE);
			IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;
		END IF;
		
		
		DELETE FROM VT_TABLE WHERE S_TABLE = @S_TABLE;
		SELECT COUNT(1) INTO @ETL_S_TAB_COUNT FROM VT_TABLE;
		SELECT ETL_DATA_GROUP_CURR_NUM + 1 INTO ETL_DATA_GROUP_CURR_NUM;
		/*进入下一组*/
	END WHILE;
	

	
	/*处理结束，记录日志信息*/
		
	SET @DROP_VT_SQL = CONCAT('DROP ',ETL_TEMPORARY,' TABLE IF EXISTS ',ETL_SCHEMA_NAME,'.',ETL_T_TAB_ENG_NAME_VT);
	CALL ETL.PR_EXEC_SQL(@RTC,'',ETL_T_TAB_ENG_NAME,3000001,@DROP_VT_SQL,ETL_TX_DATE);
	IF @RTC <> 0 THEN SET OUT_RES_MSG = '12';LEAVE LABLE;END IF;
	
	SELECT '0' INTO OUT_RES_MSG;

END |